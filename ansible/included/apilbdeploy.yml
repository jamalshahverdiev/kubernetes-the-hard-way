---
- name: Download Files
  get_url:
    url: "{{ item.src }}"
    dest: "{{ item.dst }}"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode: 0755
  with_items:
    - { src: 'https://pkg.cfssl.org/R1.2/cfssl_linux-amd64', dst: '{{ binaryDestination }}/cfssl' }
    - { src: 'https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64', dst: '{{ binaryDestination }}/cfssljson' }
  tags:
    - downloadCertGenerator
  register: downloadCertGenerator

- name: Unarchive all files
  unarchive: 
    src: "{{ archivesFolder }}/{{ item }}"
    dest: "{{ binaryDestination }}/"
  with_items:
#    - kube-apiserver.tar.bz2
#    - kube-controller-manager.tar.bz2
    - kubectl.tar.bz2
#    - kubelet.tar.bz2
#    - kube-proxy.tar.bz2
#    - kube-scheduler.tar.bz2
  tags:
    - unarchiveKubeFiles
  register: unarchiveKubeFiles

- name: Copy CA and AdminCsr files
  template:
    src: "templates/{{ item }}"
    dest: "{{ userHomeFolder }}/{{ item }}"
  with_items:
    - ca-config.json 
    - ca-csr.json 
    - admin-csr.json 
    - kube-controller-manager-csr.json
    - kube-proxy-csr.json 
    - kube-scheduler-csr.json 
    - kubernetes-csr.json 
    - service-account-csr.json
  register: copyCaAdminFiles
  tags: copyCaAdminFiles

- name: Create CA and Admin certificates
  shell: '{{ item }}'
  with_items:
    - cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    - cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
    - cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
    - cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
    - cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
    - cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{CNAME}} -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
    - cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes service-account-csr.json | cfssljson -bare service-account
  args:
    chdir: "{{ userHomeFolder }}"
  when: copyCaAdminFiles is success
  register: createCaAdminCerts
  tags: createCaAdminCerts

- name: Create Template files
  template: 
    src: "templates/worker-csr.json.j2" 
    dest: "{{ userHomeFolder }}/{{ item }}-csr.json"
  with_items:
    - "{{workers}}"
  register: createKubeletClientCerificates
  tags: createKubeletClientCerificates
  when: createCaAdminCerts is success

- name: Generate Worker Certificates
  shell: 'cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{item.ip}},{{item.name}} -profile=kubernetes {{item.name}}-csr.json | cfssljson -bare {{item.name}}'
  args:
    chdir: "{{ userHomeFolder }}"
  with_items:
    - { name: 'kubeworker1.kubernetes.loc', ip: '10.20.33.21' }
    - { name: 'kubeworker2.kubernetes.loc', ip: '10.20.33.22' }
    - { name: 'kubeworker3.kubernetes.loc', ip: '10.20.33.23' }
  register: generateWorkerCerts
  tags: generateWorkerCerts
  when: createKubeletClientCerificates is success

- name: Create Script file for Worker configurations
  template:
    src: "templates/genKubeConfigWorkers.sh.j2"
    dest: "{{ userHomeFolder }}/genKubeConfigWorkers.sh"
    mode: '0777'
  register: createScriptForkerConfigs
  tags: createScriptForkerConfigs
  when: generateWorkerCerts is success

- name: Execute Script file for Worker configurations
  shell: './genKubeConfigWorkers.sh'
  args:
    chdir: "{{ userHomeFolder }}"
  register: executeWorkerConfigScript
  tags: executeWorkerConfigScript
  when: createScriptForkerConfigs is success

...
