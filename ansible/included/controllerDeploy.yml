---
- name: Create Kubernetes Directories
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: 0775
  with_items:
    - "{{kubefolders}}"
  register: createKubeFolders
  tags: createKubeFolders

- name: Copy CA, Kubernetes and Service certificates for ETCD to the Controller nodes
  copy:
    src: "{{userHomeFolder}}/{{item}}"
    dest: "{{kubefolders[2]}}/"
  with_items:
    - ca.pem 
    - kubernetes.pem
    - kubernetes-key.pem
  register: copyEtcdCerts
  tags: copyEtcdCerts 
  when: createKubeFolders is success

- name: Copy CA, Kubernetes and Service certificates to the Controller nodes
  copy:
    src: "{{userHomeFolder}}/{{item}}"
    dest: "{{kubefolders[1]}}/"
  with_items:
    - ca.pem
    - ca-key.pem
    - kubernetes.pem
    - kubernetes-key.pem
    - service-account-key.pem
    - service-account.pem
    - encryption-config.yaml
  register: copyCertYaml
  tags: copyCertYaml
  when: createKubeFolders is success

- name: Copy ETCD Tar file
  copy:
    src: "{{ archivesFolder }}/etcd-v3.3.5-linux-amd64.tar.bz2"
    dest: "{{ userHomeFolder }}/"
  register: copyEtcdTarBz
  tags: copyEtcdTarBz
  when: createKubeFolders is success

- name: Unarchive ETCD Tar file
  unarchive:
    src: "{{userHomeFolder}}/etcd-v3.3.5-linux-amd64.tar.bz2"
    dest: "{{userHomeFolder}}/"
    remote_src: yes
  register: unarchiveEtcdTar
  tags: unarchiveEtcdTar
  when: copyEtcdTarBz is success

- name: Copy ETCD binary files
  copy:
    src: "{{ userHomeFolder }}/etcd-v3.3.5-linux-amd64/{{item}}"
    dest: "{{binaryDestination}}/"
    mode: '0777'
    remote_src: yes
  with_items:
    - etcd
    - etcdctl
  register: copyEtcdBinaryFiles
  tags: copyEtcdBinaryFiles
  when: copyEtcdCerts is success and unarchiveEtcdTar is success

- name: Copy KubeConfig files to the Controller nodes
  copy:
    src: "{{userHomeFolder}}/{{item.src}}"
    dest: "{{item.dst}}/"
  with_items:
    - { src: 'admin.kubeconfig', dst: "/root" } 
    - { src: 'kube-controller-manager.kubeconfig', dst: "{{kubefolders[1]}}" }
    - { src: 'kube-scheduler.kubeconfig', dst: "{{kubefolders[1]}}" }
    - { src: 'encryption-config.yaml', dst: "{{kubefolders[1]}}" }
    - { src: 'kube-scheduler.yaml', dst: "{{kubefolders[0]}}" }
  register: copyKubeConfigFiles
  tags: copyKubeConfigFiles

- name: Copy all System Unit files to the remote host
  template:
    src: "{{item.src}}"
    dest: "{{item.dst}}"
  with_items:
    - { src: 'templates/etcd.service.j2', dst: '/etc/systemd/system/etcd.service' }
    - { src: 'templates/kube-apiserver.service.j2', dst: '/etc/systemd/system/kube-apiserver.service' }
    - { src: 'templates/kube-controller-manager.service.j2', dst: '/etc/systemd/system/kube-controller-manager.service' }
    - { src: 'templates/kube-scheduler.service.j2', dst: '/etc/systemd/system/kube-scheduler.service' }
  register: copySystemUnitFiles
  tags: copySystemUnitFiles
  when: copyEtcdBinaryFiles is success 

- name: Unarchive Kuberenetes Binary files
  unarchive:
    src: "{{ archivesFolder }}/{{ item }}"
    dest: "{{ binaryDestination }}/"
  with_items:
    - kube-apiserver.tar.bz2
    - kube-controller-manager.tar.bz2
    - kubectl.tar.bz2
    - kube-scheduler.tar.bz2
  tags:
    - unarchiveKubernetesFiles
  register: unarchiveKubernetesFiles
  when: copyKubeConfigFiles is success and copySystemUnitFiles is success

- name: Reload Systemd, Enable and Restart ETCD Service
  systemd:
    state: restarted
    daemon_reload: yes
    name: "{{item}}"
    enabled: yes
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  register: enableStartServices
  tags: enableStartServices
  when: unarchiveKubernetesFiles is success and copyEtcdBinaryFiles is success

- name: Create ClusterRole and BindClusterRole
  shell: "{{item}}"
  with_items:
    - 'kubectl apply --kubeconfig admin.kubeconfig -f /vagrant/ansible/templates/admin.kubeconfig.ClusterRole.yml'
    - 'kubectl apply --kubeconfig admin.kubeconfig -f /vagrant/ansible/templates/admin.kubeconfig.BindClusterRole.yml'
  when: enableStartServices is success and ansible_hostname == 'kubecontroller1'
  tags: applyKubeConfigs
  register: applyKubeConfigs
...
